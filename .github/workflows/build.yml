name: Build Kernel with KSU and SUSFS
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('Makefile') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Setup Build Environment
        run: |
          echo "=== Installing Dependencies ==="
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            git make bc bison openssl libssl-dev flex zip curl \
            ccache automake lzop

      - name: Setup KernelSU
        run: |
          echo "=== Setting up KernelSU ==="
          # 确保子模块更新到正确的版本
          git submodule update --init --recursive
          
          # 创建必要的目录和链接
          mkdir -p drivers/kernelsu
          ln -sf KernelSU/kernel drivers/kernelsu
          
          # 验证 KernelSU 设置
          echo "=== Verify KernelSU Setup ==="
          ls -la drivers/kernelsu
          echo "=== KernelSU Version ==="
          cd KernelSU
          git describe --tags || echo "No tags found"
          cd ..

      - name: Setup SUSFS
        run: |
          echo "=== Setting up SUSFS ==="
          export KERNEL_ROOT=$GITHUB_WORKSPACE
          
          # 验证 SUSFS 分支
          echo "=== Verify SUSFS Branch ==="
          cd SUSFS
          git branch
          git describe --tags || echo "No tags found"
          cd $KERNEL_ROOT
          
          # 复制补丁和文件
          echo "=== Copying SUSFS Files ==="
          cp SUSFS/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch KernelSU/
          cp SUSFS/kernel_patches/50_add_susfs_in_kernel-4.19.patch ./
          
          # 复制源文件和头文件
          cp -r SUSFS/kernel_patches/fs/* fs/
          cp -r SUSFS/kernel_patches/include/linux/* include/linux/
          
          # 应用补丁
          echo "=== Applying KernelSU Patch ==="
          cd KernelSU
          if ! patch -p1 --dry-run < 10_enable_susfs_for_ksu.patch; then
            echo "WARNING: KernelSU patch may fail, proceeding anyway..."
          fi
          patch -p1 < 10_enable_susfs_for_ksu.patch || {
            echo "KernelSU patch failed, checking status..."
            git status
            git diff
          }
          
          cd $KERNEL_ROOT
          echo "=== Applying SUSFS Patch ==="
          if ! patch -p1 --dry-run < 50_add_susfs_in_kernel-4.19.patch; then
            echo "WARNING: SUSFS patch may fail, proceeding anyway..."
          fi
          patch -p1 < 50_add_susfs_in_kernel-4.19.patch || {
            echo "SUSFS patch failed, checking status..."
            git status
            git diff
          }
          
          # 验证文件结构
          echo "=== Verifying File Structure ==="
          echo "Checking fs directory:"
          ls -R fs/
          echo "Checking SUSFS headers:"
          ls -R include/linux/susfs* || true

      - name: Setup Kernel Configuration
        run: |
          echo "=== Setting up Kernel Configuration ==="
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          mkdir -p out
          mkdir -p arch/arm64/boot/dts
          
          # 使用设备默认配置作为基础
          echo "=== Using clover_defconfig as base ==="
          make O=out ARCH=arm64 clover_defconfig
          
          # 在现有配置基础上添加必要的选项
          echo "=== Adding KernelSU and SUSFS configs ==="
          ./scripts/config --file out/.config \
            -e KPROBES \
            -e HAVE_KPROBES \
            -e KPROBE_EVENTS \
            -e MODULES \
            -e OVERLAY_FS \
            -e ADVISE_SYSCALLS \
            -e KSU \
            -e KSU_SUSFS \
            -e SUSFS \
            -d KSU_SUSFS_SUS_SU \
            -e KSU_SUSFS_HAS_MAGIC_MOUNT \
            --set-str LOCALVERSION "-KernelSU-SUSFS"
          
          # 确保配置更新
          make O=out ARCH=arm64 olddefconfig
          
          # 验证配置
          echo "=== Verifying Configuration ==="
          configs_to_check=(
            "CONFIG_KPROBES"
            "CONFIG_HAVE_KPROBES"
            "CONFIG_KPROBE_EVENTS"
            "CONFIG_MODULES"
            "CONFIG_OVERLAY_FS"
            "CONFIG_ADVISE_SYSCALLS"
            "CONFIG_KSU"
            "CONFIG_KSU_SUSFS"
            "CONFIG_SUSFS"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT"
          )
          
          for config in "${configs_to_check[@]}"; do
            if grep -q "^$config=y" out/.config; then
              echo "$config is enabled ✓"
            else
              echo "ERROR: $config is not enabled ✗"
              echo "Current value:"
              grep "$config" out/.config || echo "$config not found"
              exit 1
            fi
          done
          
          echo "=== Current Configuration ==="
          echo "Checking all relevant configs:"
          grep -E "CONFIG_(KPROBES|HAVE_KPROBES|KPROBE_EVENTS|MODULES|OVERLAY_FS|ADVISE_SYSCALLS|KSU|SUSFS)" out/.config

      - name: Build Kernel
        run: |
          echo "=== Building Kernel ==="
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CCACHE_DIR=~/.ccache
          
          echo "=== Ccache Stats Before Build ==="
          ccache -s
          
          echo "=== Starting Kernel Build ==="
          # 首先尝试创建必要的目录
          mkdir -p out/arch/arm64/boot/dts
          
          make \
            O=out \
            ARCH=arm64 \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            KCFLAGS="" \
            KAFLAGS="" \
            -j$(nproc --all) 2>&1 | tee build.log
          
          echo "=== Ccache Stats After Build ==="
          ccache -s
          
          if [ -f out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "✅ Kernel compiled successfully!"
            ls -lh out/arch/arm64/boot/Image.gz-dtb
          else
            echo "❌ Kernel compilation failed!"
            echo "=== Build Log Tail ==="
            tail -n 100 build.log
            echo "=== Directory Structure ==="
            ls -R out/arch/arm64/boot/
            exit 1
          fi

      - name: Create Release Package
        if: success()
        run: |
          echo "=== Creating Release Package ==="
          mkdir -p AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          zip -r9 ../kernel-release.zip *
          cd ..
          echo "=== Release Package Contents ==="
          unzip -l kernel-release.zip

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.run_id }}
          path: |
            kernel-release.zip
            build.log
            out/.config
            out/config_status.log
          retention-days: 7

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            kernel-release.zip
            build.log
          name: KernelSU-SUSFS Release ${{ github.ref_name }}
          body: |
            KernelSU-Next with SUSFS Integration
            Build Date: ${{ github.event.head_commit.timestamp }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          echo "=== Cleaning up ==="
          make O=out clean
          make O=out mrproper
          echo "=== Final Disk Space ==="
          df -h
