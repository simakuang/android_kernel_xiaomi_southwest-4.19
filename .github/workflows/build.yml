name: Build Kernel with KSU and SUSFS
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('Makefile') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Setup Build Environment
        run: |
          echo "=== Installing Dependencies ==="
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            git make bc bison openssl libssl-dev flex zip curl \
            ccache automake lzop

      - name: Setup KernelSU
        run: |
          echo "=== Setting up KernelSU ==="
          git submodule update --init --recursive
          mkdir -p drivers/kernelsu
          ln -sf KernelSU/kernel drivers/kernelsu
          
          echo "=== Verify KernelSU Setup ==="
          ls -la drivers/kernelsu
          cd KernelSU
          git describe --tags || echo "No tags found"
          cd ..

      - name: Setup SUSFS
        run: |
          echo "=== Setting up SUSFS ==="
          export KERNEL_ROOT=$GITHUB_WORKSPACE
          
          cd SUSFS
          git branch
          git describe --tags || echo "No tags found"
          cd $KERNEL_ROOT
          
          cp SUSFS/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch KernelSU/
          cp SUSFS/kernel_patches/50_add_susfs_in_kernel-4.19.patch ./
          cp -r SUSFS/kernel_patches/fs/* fs/
          cp -r SUSFS/kernel_patches/include/linux/* include/linux/
          
          cd KernelSU
          patch -p1 < 10_enable_susfs_for_ksu.patch || true
          
          cd $KERNEL_ROOT
          patch -p1 < 50_add_susfs_in-kernel-4.19.patch || true

      - name: Setup Kernel Configuration
        run: |
          echo "=== Setting up Kernel Configuration ==="
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          mkdir -p out
          mkdir -p arch/arm64/boot/dts
          
          # 使用设备默认配置作为基础
          echo "=== Using clover_defconfig as base ==="
          make O=out ARCH=arm64 clover_defconfig
          
          # 直接修改配置文件
          echo "=== Directly modifying .config ==="
          cat >> out/.config << EOF
          CONFIG_MODULES=y
          CONFIG_KALLSYMS=y
          CONFIG_KALLSYMS_ALL=y
          CONFIG_KPROBES=y
          CONFIG_HAVE_KPROBES=y
          CONFIG_KPROBE_EVENTS=y
          CONFIG_KPROBES_ON_FTRACE=y
          CONFIG_HAVE_KPROBES_ON_FTRACE=y
          CONFIG_FTRACE=y
          CONFIG_TRACING=y
          CONFIG_OVERLAY_FS=y
          CONFIG_ADVISE_SYSCALLS=y
          CONFIG_SECURITY=y
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_SUSFS=y
          # CONFIG_KSU_SUSFS_SUS_SU is not set
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_LOCALVERSION="-KernelSU-SUSFS"
          EOF
          
          # 确保配置更新
          make O=out ARCH=arm64 olddefconfig
          
          # 验证配置
          echo "=== Verifying Configuration ==="
          configs_to_check=(
            "KPROBES"
            "HAVE_KPROBES"
            "KPROBE_EVENTS"
            "MODULES"
            "OVERLAY_FS"
            "ADVISE_SYSCALLS"
            "KSU"
            "KSU_SUSFS"
            "SUSFS"
            "KSU_SUSFS_HAS_MAGIC_MOUNT"
          )
          
          for config in "${configs_to_check[@]}"; do
            if grep -q "^CONFIG_$config=y" out/.config; then
              echo "CONFIG_$config is enabled ✓"
            else
              echo "ERROR: CONFIG_$config is not enabled ✗"
              echo "Current value:"
              grep "CONFIG_$config" out/.config || echo "CONFIG_$config not found"
              exit 1
            fi
          done
          
          echo "=== Current Configuration ==="
          grep -E "CONFIG_(KPROBE|KSU|SUSFS).*=" out/.config || true

      - name: Build Kernel
        run: |
          echo "=== Building Kernel ==="
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CCACHE_DIR=~/.ccache
          
          make O=out \
            ARCH=arm64 \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            -j$(nproc --all) 2>&1 | tee build.log
          
          if [ -f out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "✅ Kernel compiled successfully!"
          else
            echo "❌ Kernel compilation failed!"
            exit 1
          fi

      - name: Create Release Package
        if: success()
        run: |
          mkdir -p AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          zip -r9 ../kernel-release.zip *

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.run_id }}
          path: |
            kernel-release.zip
            build.log
            out/.config
          retention-days: 7

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            kernel-release.zip
            build.log
          name: KernelSU-SUSFS Release ${{ github.ref_name }}
          body: |
            KernelSU-Next with SUSFS Integration
            Build Date: ${{ github.event.head_commit.timestamp }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          make O=out clean
          make O=out mrproper
