name: Build Kernel
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('Makefile') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Setup Build Environment
        run: |
          echo "=== Installing Dependencies ==="
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            clang-15 lld-15 llvm-15 \
            git make bc bison openssl \
            libssl-dev flex zip curl \
            ccache automake lzop python3 \
            binutils-aarch64-linux-gnu
          
          echo "=== Setting up LLVM Toolchain ==="
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-15 100
          sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-15 100
          sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-15 100
          sudo update-alternatives --install /usr/bin/llvm-objcopy llvm-objcopy /usr/bin/llvm-objcopy-15 100
          sudo update-alternatives --install /usr/bin/llvm-objdump llvm-objdump /usr/bin/llvm-objdump-15 100
          sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-15 100
          
          echo "=== Checking Toolchain Versions ==="
          clang --version
          ld.lld --version
          llvm-ar --version

      - name: Setup Kernel Configuration
        run: |
          echo "=== Setting up Kernel Configuration ==="
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export LLVM=1
          export LLVM_IAS=1
          
          mkdir -p out
          mkdir -p arch/arm64/boot/dts
          
          # 使用设备默认配置
          make O=out ARCH=arm64 clover_defconfig
          
          # 基础配置选项
          ./scripts/config --file out/.config \
            -d LTO_NONE \
            -e LTO_CLANG \
            -e LTO \
            -e THINLTO \
            -d CFI \
            -d CFI_PERMISSIVE \
            -d CFI_CLANG \
            -e LLVM \
            -d LLVM_POLLY \
            -d DEBUG_INFO \
            -d DEBUG_INFO_DWARF4 \
            -d DEBUG_INFO_DWARF5 \
            -d KPROBES \
            -d HAVE_KPROBES \
            -d KPROBE_EVENTS
          
          # 更新配置
          make O=out ARCH=arm64 olddefconfig
          
          echo "=== Verify Configuration ==="
          grep -E "CONFIG_(LTO|LLVM|CFI).*=" out/.config

      - name: Build Kernel
        run: |
          echo "=== Building Kernel ==="
          # 设置环境变量
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CC=clang
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          export LD=ld.lld
          export LLVM=1
          export LLVM_IAS=1
          export CCACHE_DIR=~/.ccache
          
          # 基础编译参数
          KBUILD_CFLAGS="-O2 --target=aarch64-linux-gnu"
          KBUILD_CFLAGS+=" -Wno-unused-variable -Wno-unused-function"
          KBUILD_CFLAGS+=" -Wno-return-type -Wno-strict-aliasing"
          KBUILD_CFLAGS+=" -fno-common -fno-stack-protector"
          KBUILD_CFLAGS+=" -fno-asynchronous-unwind-tables"
          KBUILD_CFLAGS+=" -flto=thin"
          export KBUILD_CFLAGS
          
          # 显示编译信息
          echo "=== Compiler Version ==="
          ${CC} --version
          
          echo "=== Build Flags ==="
          echo "KBUILD_CFLAGS: ${KBUILD_CFLAGS}"
          
          echo "=== Starting Kernel Build ==="
          make O=out \
            ARCH=arm64 \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            STRIP=llvm-strip \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            LLVM=1 \
            LLVM_IAS=1 \
            -j$(nproc --all) 2>&1 | tee build.log
          
          if [ -f out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "✅ Kernel compiled successfully!"
            ls -lh out/arch/arm64/boot/Image.gz-dtb
          else
            echo "❌ Kernel compilation failed!"
            echo "=== Build Log Tail ==="
            tail -n 100 build.log
            exit 1
          fi

      - name: Create Release Package
        if: success()
        run: |
          echo "=== Creating Release Package ==="
          mkdir -p release
          cp out/arch/arm64/boot/Image.gz-dtb release/
          cd release
          zip -r9 ../kernel-release.zip *

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.run_id }}
          path: |
            kernel-release.zip
            build.log
            out/.config
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          echo "=== Cleaning up ==="
          make O=out clean
          make O=out mrproper
          ccache -s
          echo "=== Final Disk Space ==="
          df -h
