name: Build Kernel with KernelSU-Next and SUSFS
on:
  push:
    branches: [ main ]  # 根据你的主分支名调整
  pull_request:
    branches: [ main ]
  workflow_dispatch:    # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup Build Environment
        run: |
          echo "=== Installing Dependencies ==="
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi
          sudo apt-get install -y git make bc bison openssl
          sudo apt-get install -y libssl-dev flex zip curl
          sudo apt-get install -y ccache automake lzop
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi

      - name: Download KernelSU-Next
        run: |
          echo "=== Setting up KernelSU-Next ==="
          git submodule add https://github.com/rifsxd/KernelSU-Next KernelSU
          ln -sf KernelSU/kernel drivers/kernelsu

      - name: Download and Setup SUSFS
        run: |
          echo "=== Setting up SUSFS ==="
          export KERNEL_ROOT=$GITHUB_WORKSPACE
          
          # 克隆特定版本的 SUSFS
          git clone https://gitlab.com/simonpunk/susfs4ksu.git --branch v1.1.0 --depth 1
          
          # 创建必要的目录
          mkdir -p $KERNEL_ROOT/fs
          mkdir -p $KERNEL_ROOT/include/linux
          
          # 复制 SUSFS 相关文件
          cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch $KERNEL_ROOT/KernelSU/
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.19.patch $KERNEL_ROOT/
          cp ./susfs4ksu/kernel_patches/fs/susfs.c $KERNEL_ROOT/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/susfs.h $KERNEL_ROOT/include/linux/
          
          # 应用补丁
          cd $KERNEL_ROOT/KernelSU
          patch -p1 < 10_enable_susfs_for_ksu.patch || true
          
          cd $KERNEL_ROOT
          patch -p1 < 50_add_susfs_in_kernel-4.19.patch || true

      - name: Modify Kernel Source
        run: |
          echo "=== Modifying Kernel Source ==="
          # 修改 init/main.c
          sed -i '1i#ifdef CONFIG_KPROBES\n#include "../drivers/kernelsu/ksu.h"\n#endif' init/main.c
          
          # 在 kernel_init 函数中添加初始化代码
          sed -i '/int kernel_init(void *unused)/a\#ifdef CONFIG_KPROBES\n    ksu_kernel_init();\n#endif' init/main.c
          
          # 添加 SUSFS 到构建系统
          echo "source \"fs/susfs/Kconfig\"" >> fs/Kconfig
          echo "obj-\$(CONFIG_SUSFS) += susfs/" >> fs/Makefile

      - name: Setup Kernel Configuration
        run: |
          echo "=== Setting up Kernel Configuration ==="
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # 使用设备配置
          make clover_defconfig
          
          # 启用必要的配置
          scripts/config --set-str CONFIG_LOCALVERSION "-KernelSU-SUSFS"
          scripts/config --enable CONFIG_KPROBES
          scripts/config --enable CONFIG_HAVE_KPROBES
          scripts/config --enable CONFIG_KPROBE_EVENTS
          scripts/config --enable CONFIG_OVERLAY_FS
          scripts/config --enable CONFIG_MODULES
          scripts/config --enable CONFIG_KSU
          scripts/config --enable CONFIG_KSU_SUSFS

      - name: Verify Configurations
        run: |
          echo "=== Verifying Configurations ==="
          grep -E "CONFIG_KPROBES|CONFIG_OVERLAY_FS|CONFIG_KSU|CONFIG_SUSFS" .config

      - name: Build Kernel
        run: |
          echo "=== Building Kernel ==="
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          make -j$(nproc --all) 2>&1 | tee build.log

      - name: Create Release Package
        run: |
          echo "=== Creating Release Package ==="
          mkdir -p AnyKernel3
          cp arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          zip -r9 ../kernel-release.zip *

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kernel-release
          path: |
            kernel-release.zip
            build.log

      - name: Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            .config
            build.log
            *.rej
            *.orig

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            kernel-release.zip
            build.log
          name: KernelSU-SUSFS Release ${{ github.ref_name }}
          body: |
            KernelSU-Next with SUSFS Integration
            Build Date: ${{ github.event.head_commit.timestamp }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          echo "=== Cleaning up ==="
          make clean
          make mrproper
